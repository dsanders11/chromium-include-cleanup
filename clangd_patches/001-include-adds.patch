commit 5e87d27d560c725cb54e5fd3307852c170850b47
Author: David Sanders <dsanders11@ucsbalum.com>
Date:   Sun Feb 6 03:35:30 2022 -0800

    [clangd] IncludeCleaner: Quick and dirty needed include diagnostic
    
    Adds a new "needed-includes" diagnostic for headers which are
    used by the file, but aren't currently included.

diff --git a/clang-tools-extra/clangd/Config.h b/clang-tools-extra/clangd/Config.h
index f84b5ef1ffb5..4171f71470ae 100644
--- a/clang-tools-extra/clangd/Config.h
+++ b/clang-tools-extra/clangd/Config.h
@@ -86,7 +86,8 @@ struct Config {
     ExternalIndexSpec External;
   } Index;
 
-  enum UnusedIncludesPolicy { Strict, None };
+  enum class NeededIncludesPolicy { Strict, None };
+  enum class UnusedIncludesPolicy { Strict, None };
   /// Controls warnings and errors when parsing code.
   struct {
     bool SuppressAll = false;
@@ -99,7 +100,8 @@ struct Config {
       llvm::StringMap<std::string> CheckOptions;
     } ClangTidy;
 
-    UnusedIncludesPolicy UnusedIncludes = None;
+    NeededIncludesPolicy NeededIncludes = NeededIncludesPolicy::None;
+    UnusedIncludesPolicy UnusedIncludes = UnusedIncludesPolicy::None;
   } Diagnostics;
 
   /// Style of the codebase.
diff --git a/clang-tools-extra/clangd/ConfigCompile.cpp b/clang-tools-extra/clangd/ConfigCompile.cpp
index 4438a29d5608..9895fc76952c 100644
--- a/clang-tools-extra/clangd/ConfigCompile.cpp
+++ b/clang-tools-extra/clangd/ConfigCompile.cpp
@@ -423,6 +423,16 @@ struct FragmentCompiler {
               C.Diagnostics.Suppress.insert(N);
           });
 
+    if (F.NeededIncludes)
+      if (auto Val = compileEnum<Config::NeededIncludesPolicy>(
+                         "NeededIncludes", **F.NeededIncludes)
+                         .map("Strict", Config::NeededIncludesPolicy::Strict)
+                         .map("None", Config::NeededIncludesPolicy::None)
+                         .value())
+        Out.Apply.push_back([Val](const Params &, Config &C) {
+          C.Diagnostics.NeededIncludes = *Val;
+        });
+
     if (F.UnusedIncludes)
       if (auto Val = compileEnum<Config::UnusedIncludesPolicy>(
                          "UnusedIncludes", **F.UnusedIncludes)
diff --git a/clang-tools-extra/clangd/ConfigFragment.h b/clang-tools-extra/clangd/ConfigFragment.h
index cbaf6deb69de..d4266d4e8d96 100644
--- a/clang-tools-extra/clangd/ConfigFragment.h
+++ b/clang-tools-extra/clangd/ConfigFragment.h
@@ -232,6 +232,11 @@ struct Fragment {
     /// - None
     llvm::Optional<Located<std::string>> UnusedIncludes;
 
+    /// Valid values are:
+    /// - Strict
+    /// - None
+    llvm::Optional<Located<std::string>> NeededIncludes;
+
     /// Controls how clang-tidy will run over the code base.
     ///
     /// The settings are merged with any settings found in .clang-tidy
diff --git a/clang-tools-extra/clangd/ConfigYAML.cpp b/clang-tools-extra/clangd/ConfigYAML.cpp
index 9e4a4e0792df..d67acb3d7391 100644
--- a/clang-tools-extra/clangd/ConfigYAML.cpp
+++ b/clang-tools-extra/clangd/ConfigYAML.cpp
@@ -125,6 +125,9 @@ private:
       if (auto Values = scalarValues(N))
         F.Suppress = std::move(*Values);
     });
+    Dict.handle("NeededIncludes", [&](Node &N) {
+      F.NeededIncludes = scalarValue(N, "NeededIncludes");
+    });
     Dict.handle("UnusedIncludes", [&](Node &N) {
       F.UnusedIncludes = scalarValue(N, "UnusedIncludes");
     });
diff --git a/clang-tools-extra/clangd/IncludeCleaner.cpp b/clang-tools-extra/clangd/IncludeCleaner.cpp
index 04dbf12410cf..7df648b9da0e 100644
--- a/clang-tools-extra/clangd/IncludeCleaner.cpp
+++ b/clang-tools-extra/clangd/IncludeCleaner.cpp
@@ -12,6 +12,7 @@
 #include "ParsedAST.h"
 #include "Protocol.h"
 #include "SourceCode.h"
+#include "URI.h"
 #include "support/Logger.h"
 #include "support/Trace.h"
 #include "clang/AST/ASTContext.h"
@@ -365,6 +366,30 @@ getUnused(ParsedAST &AST,
   return Unused;
 }
 
+std::vector<std::string>
+getNeeded(ParsedAST &AST,
+          const llvm::DenseSet<IncludeStructure::HeaderID> &ReferencedFiles) {
+  trace::Span Tracer("IncludeCleaner::getNeeded");
+  auto Includes = AST.getIncludeStructure();
+  llvm::DenseSet<IncludeStructure::HeaderID> CurrentIncludes;
+  for (const Inclusion &MFI : Includes.MainFileIncludes) {
+    if (!MFI.HeaderID)
+      continue;
+    auto IncludeID = static_cast<IncludeStructure::HeaderID>(*MFI.HeaderID);
+    CurrentIncludes.insert(IncludeID);
+  }
+  std::vector<std::string> NeededIncludes;
+  for (auto IncludeID : ReferencedFiles) {
+    if (IncludeID != Includes.MainFileID &&
+        Includes.isSelfContained(IncludeID)) {
+      bool Needed = !CurrentIncludes.contains(IncludeID);
+      if (Needed)
+        NeededIncludes.push_back(std::string(Includes.getRealPath(IncludeID)));
+    }
+  }
+  return NeededIncludes;
+}
+
 #ifndef NDEBUG
 // Is FID a <built-in>, <scratch space> etc?
 static bool isSpecialBuffer(FileID FID, const SourceManager &SM) {
@@ -407,6 +432,17 @@ std::vector<const Inclusion *> computeUnusedIncludes(ParsedAST &AST) {
   return getUnused(AST, ReferencedHeaders);
 }
 
+std::vector<std::string> computeNeededIncludes(ParsedAST &AST) {
+  const auto &SM = AST.getSourceManager();
+
+  auto Refs = findReferencedLocations(AST);
+  auto ReferencedFileIDs = findReferencedFiles(Refs, AST.getIncludeStructure(),
+                                               AST.getSourceManager());
+  auto ReferencedHeaders =
+      translateToHeaderIDs(ReferencedFileIDs, AST.getIncludeStructure(), SM);
+  return getNeeded(AST, ReferencedHeaders);
+}
+
 std::vector<Diag> issueUnusedIncludesDiagnostics(ParsedAST &AST,
                                                  llvm::StringRef Code) {
   const Config &Cfg = Config::current();
@@ -450,5 +486,46 @@ std::vector<Diag> issueUnusedIncludesDiagnostics(ParsedAST &AST,
   return Result;
 }
 
+std::vector<Diag>
+issueNeededIncludesDiagnostics(ParsedAST &AST,
+                               std::shared_ptr<IncludeInserter> Inserter,
+                               llvm::StringRef Code) {
+  const Config &Cfg = Config::current();
+  if (Cfg.Diagnostics.NeededIncludes != Config::NeededIncludesPolicy::Strict ||
+      Cfg.Diagnostics.SuppressAll ||
+      Cfg.Diagnostics.Suppress.contains("needed-includes"))
+    return {};
+  trace::Span Tracer("IncludeCleaner::issueNeededIncludesDiagnostics");
+  std::vector<Diag> Result;
+  std::string FileName =
+      AST.getSourceManager()
+          .getFileEntryForID(AST.getSourceManager().getMainFileID())
+          ->getName()
+          .str();
+  for (const auto &Inc : computeNeededIncludes(AST)) {
+    if (auto HeaderFile =
+            toHeaderFile(URI::createFile(Inc).toString(), FileName)) {
+      if (auto Spelled =
+              Inserter->calculateIncludePath(*HeaderFile, FileName)) {
+        if (auto Edit = Inserter->insert(*Spelled)) {
+          Diag D;
+          D.Message = llvm::formatv("header {0} should be included", *Spelled);
+          D.Name = "needed-includes";
+          D.Source = Diag::DiagSource::Clangd;
+          D.File = FileName;
+          D.Severity = DiagnosticsEngine::Note;
+          D.Range = Edit->range;
+          D.Fixes.emplace_back();
+          D.Fixes.back().Message = llvm::formatv("add #include {0}", *Spelled);
+          D.Fixes.back().Edits.push_back(*Edit);
+          D.InsideMainFile = true;
+          Result.push_back(std::move(D));
+        }
+      }
+    }
+  }
+  return Result;
+}
+
 } // namespace clangd
 } // namespace clang
diff --git a/clang-tools-extra/clangd/IncludeCleaner.h b/clang-tools-extra/clangd/IncludeCleaner.h
index 183f84f2f3bf..4d84b46fcc0c 100644
--- a/clang-tools-extra/clangd/IncludeCleaner.h
+++ b/clang-tools-extra/clangd/IncludeCleaner.h
@@ -79,14 +79,23 @@ llvm::DenseSet<IncludeStructure::HeaderID>
 translateToHeaderIDs(const ReferencedFiles &Files,
                      const IncludeStructure &Includes, const SourceManager &SM);
 
+std::vector<std::string>
+getNeeded(ParsedAST &AST,
+          const llvm::DenseSet<IncludeStructure::HeaderID> &ReferencedFiles);
+
 /// Retrieves headers that are referenced from the main file but not used.
 /// In unclear cases, headers are not marked as unused.
 std::vector<const Inclusion *>
 getUnused(ParsedAST &AST,
           const llvm::DenseSet<IncludeStructure::HeaderID> &ReferencedFiles);
 
+std::vector<std::string> computeNeededIncludes(ParsedAST &AST);
 std::vector<const Inclusion *> computeUnusedIncludes(ParsedAST &AST);
 
+std::vector<Diag>
+issueNeededIncludesDiagnostics(ParsedAST &AST,
+                               std::shared_ptr<IncludeInserter> Inserter,
+                               llvm::StringRef Code);
 std::vector<Diag> issueUnusedIncludesDiagnostics(ParsedAST &AST,
                                                  llvm::StringRef Code);
 
diff --git a/clang-tools-extra/clangd/ParsedAST.cpp b/clang-tools-extra/clangd/ParsedAST.cpp
index 295418c8434a..2e9674a1045d 100644
--- a/clang-tools-extra/clangd/ParsedAST.cpp
+++ b/clang-tools-extra/clangd/ParsedAST.cpp
@@ -594,6 +594,15 @@ ParsedAST::build(llvm::StringRef Filename, const ParseInputs &Inputs,
       Diags->insert(Diags->end(), D.begin(), D.end());
     }
   }
+  auto BuildDir = VFS->getCurrentWorkingDirectory();
+  auto Style = getFormatStyleForFile(Filename, Inputs.Contents, *Inputs.TFS);
+  auto Inserter = std::make_shared<IncludeInserter>(
+      Filename, Inputs.Contents, Style, BuildDir.get(),
+      &Clang->getPreprocessor().getHeaderSearchInfo());
+  if (Preamble) {
+    for (const auto &Inc : Preamble->Includes.MainFileIncludes)
+      Inserter->addExisting(Inc);
+  }
   ParsedAST Result(Inputs.Version, std::move(Preamble), std::move(Clang),
                    std::move(Action), std::move(Tokens), std::move(Macros),
                    std::move(Marks), std::move(ParsedDecls), std::move(Diags),
@@ -604,6 +613,11 @@ ParsedAST::build(llvm::StringRef Filename, const ParseInputs &Inputs,
     Result.Diags->insert(Result.Diags->end(),
                          make_move_iterator(UnusedHeadersDiags.begin()),
                          make_move_iterator(UnusedHeadersDiags.end()));
+    auto NeededHeadersDiags =
+        issueNeededIncludesDiagnostics(Result, Inserter, Inputs.Contents);
+    Result.Diags->insert(Result.Diags->end(),
+                         make_move_iterator(NeededHeadersDiags.begin()),
+                         make_move_iterator(NeededHeadersDiags.end()));
   }
   return Result;
 }
