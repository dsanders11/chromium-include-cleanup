commit cbe7b64e72c002de4ef652531f9e465a3d5a35d3
Author: David Sanders <dsanders11@ucsbalum.com>
Date:   Sun Apr 3 17:01:50 2022 -0700

    [clangd] IncludeCleaner: Respect main file forward declarations
    
    Current behavior won't suggest unused includes, and will suggest
    includes to add, even if there's a forward declaration in the
    main file. This isn't intuitive behavior expected by users. So
    if there's a forward declaration in the main file, consider that
    the only usage needed, as expected.
    
    This will create false positives when the forward declaration is
    wrong and not sufficient for the usage, but IncludeCleaner does
    not currently make any determination regarding validity of
    forward declarations.

diff --git a/clang-tools-extra/clangd/IncludeCleaner.cpp b/clang-tools-extra/clangd/IncludeCleaner.cpp
index 7df648b9da0e..ab145cc46c36 100644
--- a/clang-tools-extra/clangd/IncludeCleaner.cpp
+++ b/clang-tools-extra/clangd/IncludeCleaner.cpp
@@ -138,18 +138,19 @@ private:
     }
     // Special case RecordDecls, as it is common for them to be forward
     // declared multiple times. The most common cases are:
+    // - There's a forward declaration in the main file, no need for other
+    //   redecls.
     // - Definition available in TU, only mark that one as usage. The rest is
     //   likely to be unnecessary. This might result in false positives when an
     //   internal definition is visible.
-    // - There's a forward declaration in the main file, no need for other
-    //   redecls.
     if (const auto *RD = llvm::dyn_cast<RecordDecl>(D)) {
+      if (SM.isInMainFile(RD->getMostRecentDecl()->getLocation())) {
+        return;
+      }
       if (const auto *Definition = RD->getDefinition()) {
         Result.User.insert(Definition->getLocation());
         return;
       }
-      if (SM.isInMainFile(RD->getMostRecentDecl()->getLocation()))
-        return;
     }
     for (const Decl *Redecl : D->redecls())
       Result.User.insert(Redecl->getLocation());
